-- SQLBook: Code
USE dbms_assignment;

-- Product Table

CREATE TABLE products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    price INT NOT NULL,  
    description VARCHAR(50) NOT NULL,
    stock_quantity INT NOT NULL,
    image_id INT NOT NULL,
    category_id INT NOT NULL,
    FOREIGN KEY (category_id) REFERENCES category (category_id),
    FOREIGN KEY (image_id) REFERENCES images (image_id)
);


-- Inserting 30 products into the products table with image_id limited to 20
INSERT INTO products (name, price, description, stock_quantity, image_id, category_id) VALUES
("iPhone 13", 999, "Latest Apple smartphone", 50, 1, 7),
("Samsung Galaxy S21", 799, "Latest Samsung smartphone", 30, 2, 7),
("Gaming Chair", 199, "Comfortable gaming chair", 20, 3, 3),
("Garden Shovel", 25, "Durable garden shovel", 100, 4, 2),
("Rolex Watch", 5000, "Luxury wristwatch", 10, 5, 8),
("PlayStation 5", 499, "Next-gen gaming console", 15, 6, 4),
("Call of Duty: Vanguard", 60, "Popular FPS game", 40, 7, 4),
("Halo Infinite", 60, "Latest Halo game", 35, 8, 4),
("Pen", 2, "Blue ink pen", 200, 9, 5),
("Pencil", 1, "Standard graphite pencil", 150, 10, 5),
("MacBook Pro", 1299, "High-performance laptop", 25, 11, 9),
("Dell XPS 13", 999, "Compact and powerful laptop", 20, 12, 9),
("Lenovo ThinkPad", 899, "Business laptop with great battery life", 15, 13, 9),
("HP Spectre x360", 1099, "2-in-1 convertible laptop", 10, 14, 9),
("LG OLED TV", 1499, "Stunning 4K OLED TV", 5, 15, 1),
("Sony WH-1000XM4", 349, "Noise-canceling headphones", 30, 16, 1),
("Samsung Galaxy Tab", 499, "Versatile tablet for work and play", 20, 17, 1),
("Apple Watch", 399, "Smartwatch with fitness tracking", 25, 18, 8),
("Shovel", 25, "Durable garden shovel", 100, 19, 2),
("Bathroom Scale", 29, "Digital bathroom scale", 50, 20, 6),
("Car Vacuum Cleaner", 49, "Portable car vacuum cleaner", 40, 1, 10),
("Electric Kettle", 39, "Fast boiling electric kettle", 60, 2, 11),
("Soap", 3, "Moisturizing hand soap", 200, 3, 6),
("Dishwasher", 499, "High-efficiency dishwasher", 10, 4, 11),
("Gaming Mouse", 59, "High precision gaming mouse", 30, 5, 1),
("Wireless Charger", 29, "Fast wireless charging pad", 100, 6, 1),
("Office Chair", 149, "Ergonomic office chair", 20, 7, 3),
("Garden Hose", 35, "Durable garden hose", 80, 8, 2),
("Laptop Stand", 45, "Adjustable laptop stand", 50, 9, 9),
("Smartphone Case", 15, "Protective case for smartphones", 150, 10, 7);


-- SQLBook: Code
-- Address Table

CREATE Table shipping_address (
    address_id INT PRIMARY KEY AUTO_INCREMENT,
    address_line VARCHAR(20) NOT NULL,
    city VARCHAR(30) NOT NULL,
    state VARCHAR(50) NOT NULL,
    pincode INT NOT NULL   
);

-- address data insertion
INSERT INTO shipping_address (address_line, city, state, pincode) VALUES
("123 Main St", "New York", "New York", 10001),
("456 Elm St", "Los Angeles", "California", 90001),
("789 Oak St", "Chicago", "Illinois", 60601),
("101 Pine St", "Houston", "Texas", 77001),
("202 Maple St", "Phoenix", "Arizona", 85001),
("303 Cedar St", "Philadelphia", "Pennsylvania", 19101),
("404 Birch St", "San Antonio", "Texas", 78201),
("505 Walnut St", "San Diego", "California", 92101),
("606 Cherry St", "Dallas", "Texas", 75201),
("707 Spruce St", "San Jose", "California", 95101),
("808 Ash St", "Austin", "Texas", 73301),
("909 Willow St", "Jacksonville", "Florida", 32099),
("111 Fir St", "San Francisco", "California", 94101),
("222 Poplar St", "Columbus", "Ohio", 43201),
("333 Chestnut St", "Fort Worth", "Texas", 76101),
("444 Sycamore St", "Indianapolis", "Indiana", 46201),
("555 Hickory St", "Charlotte", "North Carolina", 28201),
("666 Spruce St", "Seattle", "Washington", 98101),
("777 Redwood St", "Denver", "Colorado", 80201),
("888 Palm St", "Washington", "D.C.", 20001);
-- SQLBook: Code
-- User Table
CREATE TABLE user (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL, 
    email VARCHAR(50) NOT NULL, 
    user_type ENUM("admin", "seller", "customer"), 
    address_id INT NOT NULL, 
    FOREIGN KEY (address_id) REFERENCES shipping_address (address_id)
);

INSERT INTO user (name, email, user_type, address_id) VALUES
("Alice Johnson", "alice.johnson@example.com", "customer", 1),
("Bob Smith", "bob.smith@example.com", "seller", 2),
("Charlie Brown", "charlie.brown@example.com", "customer", 3),
("Diana Prince", "diana.prince@example.com", "admin", 4),
("Ethan Hunt", "ethan.hunt@example.com", "customer", 5),
("Fiona Gallagher", "fiona.gallagher@example.com", "seller", 6),
("George Costanza", "george.costanza@example.com", "customer", 7),
("Hannah Baker", "hannah.baker@example.com", "admin", 8),
("Ian Malcolm", "ian.malcolm@example.com", "customer", 9),
("Julia Roberts", "julia.roberts@example.com", "seller", 10),
("Kevin Spacey", "kevin.spacey@example.com", "customer", 11),
("Laura Croft", "laura.croft@example.com", "admin", 12),
("Michael Scott", "michael.scott@example.com", "customer", 13),
("Nina Simone", "nina.simone@example.com", "seller", 14),
("Oscar Isaac", "oscar.isaac@example.com", "customer", 15),
("Paula Patton", "paula.patton@example.com", "admin", 16),
("Quentin Tarantino", "quentin.tarantino@example.com", "customer", 17),
("Rachel Green", "rachel.green@example.com", "seller", 18),
("Steve Rogers", "steve.rogers@example.com", "customer", 19),
("Tina Fey", "tina.fey@example.com", "admin", 20);


-- SQLBook: Code
-- Category Table
use  dbms_assignment;
CREATE TABLE category (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50) NOT NULL,
    parent_category VARCHAR(50) DEFAULT(   
        "Top Category"
    )
);
drop TABLE category;
INSERT INTO category (name) VALUES
("Electronics"),
("Gardening"),
("Furniture"),
("Video Games"),
("Stationary"),
("Home essentitals");
INSERT INTO category (name, parent_category) VALUES
("Mobile", "Electronics"),
("Watches", "Electronics"),
("Chair", "Furniture"),
("Shovel", "Gardening"),
("Call of Duty", "Video Games"),
("Halo", "Video Games"),
("Pen", "Stationary"),
("Pencil", "Stationary"),
("Home Applicances","Electronics"),
("Car Appliances","Electronics"),
("Soap","Home essentitals"),
("Bathroom Equpment","Home essentitals"),
("Laptops","Electronics"),
("lenovo","Laptops"),
("hp","Laptops"),
("mi","Mobile"),
("apple","Mobile");
-- SQLBook: Code
-- Order Table

CREATE TABLE orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT, -- order id
    user_id INT NOT NULL, -- user id
    order_date TIMESTAMP NOT NULL DEFAULT(CURRENT_TIMESTAMP), -- order date
    status ENUM(
        'in processing',
        'not delivered',
        'delivered'
    ), -- status
    address_id INT NOT NULL, -- address id
    FOREIGN KEY (user_id) REFERENCES user(user_id),
    FOREIGN KEY (address_id) REFERENCES shipping_address (address_id)
);


-- order data insertion
INSERT INTO orders (user_id, order_date, status, address_id) VALUES
(1, CURRENT_TIMESTAMP, 'delivered', 1),
(1, CURRENT_TIMESTAMP, 'in processing', 1),
(2, CURRENT_TIMESTAMP, 'not delivered', 2),
(2, CURRENT_TIMESTAMP, 'delivered', 2),
(3, CURRENT_TIMESTAMP, 'in processing', 3),
(3, CURRENT_TIMESTAMP, 'delivered', 3),
(4, CURRENT_TIMESTAMP, 'not delivered', 4),
(4, CURRENT_TIMESTAMP, 'delivered', 4),
(5, CURRENT_TIMESTAMP, 'in processing', 5),
(5, CURRENT_TIMESTAMP, 'delivered', 5),
(6, CURRENT_TIMESTAMP, 'not delivered', 6),
(6, CURRENT_TIMESTAMP, 'delivered', 6),
(7, CURRENT_TIMESTAMP, 'in processing', 7),
(7, CURRENT_TIMESTAMP, 'delivered', 7),
(8, CURRENT_TIMESTAMP, 'not delivered', 8),
(8, CURRENT_TIMESTAMP, 'delivered', 8),
(9, CURRENT_TIMESTAMP, 'in processing', 9),
(9, CURRENT_TIMESTAMP, 'delivered', 9),
(10, CURRENT_TIMESTAMP, 'not delivered', 10),
(10, CURRENT_TIMESTAMP, 'delivered', 10),
(11, CURRENT_TIMESTAMP, 'in processing', 1),
(11, CURRENT_TIMESTAMP, 'delivered', 1),
(12, CURRENT_TIMESTAMP, 'not delivered', 2),
(12, CURRENT_TIMESTAMP, 'delivered', 2),
(13, CURRENT_TIMESTAMP, 'in processing', 3),
(13, CURRENT_TIMESTAMP, 'delivered', 3),
(14, CURRENT_TIMESTAMP, 'not delivered', 4),
(14, CURRENT_TIMESTAMP, 'delivered', 4),
(15, CURRENT_TIMESTAMP, 'in processing', 5),
(15, CURRENT_TIMESTAMP, 'delivered', 5),
(16, CURRENT_TIMESTAMP, 'not delivered', 6),
(16, CURRENT_TIMESTAMP, 'delivered', 6),
(17, CURRENT_TIMESTAMP, 'in processing', 7),
(17, CURRENT_TIMESTAMP, 'delivered', 7),
(18, CURRENT_TIMESTAMP, 'not delivered', 8),
(18, CURRENT_TIMESTAMP, 'delivered', 8),
(19, CURRENT_TIMESTAMP, 'in processing', 9),
(19, CURRENT_TIMESTAMP, 'delivered', 9),
(20, CURRENT_TIMESTAMP, 'not delivered', 10),
(20, CURRENT_TIMESTAMP, 'delivered', 10),
(1, CURRENT_TIMESTAMP, 'in processing', 1),
(2, CURRENT_TIMESTAMP, 'delivered', 2),
(3, CURRENT_TIMESTAMP, 'not delivered', 3),
(4, CURRENT_TIMESTAMP, 'delivered', 4),
(5, CURRENT_TIMESTAMP, 'in processing', 5),
(6, CURRENT_TIMESTAMP, 'delivered', 6),
(7, CURRENT_TIMESTAMP, 'not delivered', 7),
(8, CURRENT_TIMESTAMP, 'delivered', 8),
(9, CURRENT_TIMESTAMP, 'in processing', 9),
(10, CURRENT_TIMESTAMP, 'delivered', 10);



-- SQLBook: Code
-- Image Table

CREATe TABLE images (
    image_id INT PRIMARY KEY AUTO_INCREMENT,
    image_url  VARCHAR(50) NOT NULL
   );

-- image data insertion
INSERT INTO images (image_url) VALUES
("image1"),
("image2"),
("image3"),
("image4"),
("image5"),
("image6"),
("image7"),
("image8"),
("image9"),
("image10"),
("image11"),
("image12"),
("image13"),
("image14"),
("image15"),
("image16"),
("image17"),
("image18"),
("image19"),
("image20");
-- SQLBook: Code
-- order items
CREATE TABLE order_items (
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    FOREIGN KEY (product_id) REFERENCES products (product_id),
    FOREIGN KEY (order_id) REFERENCES orders (order_id)
)

INSERT INTO order_items (order_id, product_id) VALUES
(1, 1), (1, 2), (2, 3), (2, 4), (3, 5), (3, 6), (4, 7), (4, 8),
(5, 9), (5, 10), (6, 11), (6, 12), (7, 13), (7, 14), (8, 15), (8, 16),
(9, 17), (9, 18), (10, 19), (10, 20), (11, 1), (11, 2), (12, 3), (12, 4),
(13, 5), (13, 6), (14, 7), (14, 8), (15, 9), (15, 10), (16, 11), (16, 12),
(17, 13), (17, 14), (18, 15), (18, 16), (19, 17), (19, 18), (20, 19), (20, 20),
(21, 1), (21, 2), (22, 3), (22, 4), (23, 5), (23, 6), (24, 7), (24, 8),
(25, 9), (25, 10), (26, 11), (26, 12), (27, 13), (27, 14), (28, 15), (28, 16),
(29, 17), (29, 18), (30, 19), (30, 20);
-- SQLBook: Code
-- Assignment 2 

-- Insert sample data in StoreFront tables by using SQL files.
SELECT * FROM category;
SELECT * FROM images;
SELECT * FROM user;
SELECT * FROM products;
SELECT * FROM orders;
SELECT * FROM shipping_address;


--Display Id, Title, Category Title, Price of the products which are Active and recently added products should be at top.
SELECT p.product_id AS Id, p.name AS Title, c.name AS Category_Title, p.price
FROM products p
JOIN category c ON p.product_id = c.product_id
WHERE p.stock_quantity > 0  -- Assuming active means in stock
ORDER BY p.product_id DESC;  -- Assuming recently added means higher Id

--Display the list of products which don't have any images.
SELECT p.product_id AS Id, p.name AS Title
FROM products p
WHERE p.image_id IS NULL;


--Display all Id, Title and Parent Category Title for all the Categories listed, sorted by Parent Category Title and then Category Title. (If Category is top category then Parent Category Title column should display “Top Category” as value.)

SELECT category_id,name,parent_category
from category
ORDER BY
    CASE
        WHEN parent_category = 'Top Category' THEN 0
        ELSE 1
    END,
    name;




--Display Id, Title, Parent Category Title of all the leaf Categories (categories which are not parent of any other category)

SELECT c.category_id AS Id, c.name AS Title, 
       COALESCE((SELECT name FROM category WHERE category_id = c.product_id), 'Top Category') AS Parent_Category_Title
FROM category c
WHERE NOT EXISTS (SELECT 1 FROM category c2 WHERE c2.product_id = c.category_id);


--Display Product Title, Price & Description which falls into particular category Title (i.e. “Mobile”)
SELECT p.name AS Product_Title, p.price, p.description
FROM products p
JOIN category c ON p.product_id = c.product_id
WHERE c.name = 'Clothing';


--Display the list of Products whose Quantity on hand (Inventory) is under 50.
SELECT p.product_id AS Id, p.name AS Title, p.stock_quantity
FROM products p
WHERE p.stock_quantity < 50;


-- SQLBook: Code
-- Assignment 3
ALTER TABLE orders
ADD COLUMN order_amount DECIMAL(10,2) GENERATED ALWAYS AS (
    (SELECT SUM(p.price)
     FROM order_items oi
     JOIN products p ON oi.product_id = p.product_id
     WHERE oi.order_id = orders.order_id)
) STORED;
--Display Recent 50 Orders placed (Id, Order Date, Order Total).

SELECT 
    o.order_id,
    SUM(p.price) AS order_amount
FROM 
    orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
GROUP BY 
    o.order_id
 Limit 50;



--Display 10 most expensive Orders.
SELECT 
    o.order_id,
    SUM(p.price) AS order_amount
FROM 
    orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
GROUP BY 
    o.order_id 
ORDER BY
order_amount DESC
 Limit 10;
--Display all the Orders which are placed more than 10 days old and one or more items from those orders are still not shipped.
SELECT * FROM orders
where (CURRENT_TIMESTAMP - order_date > 10) AND (status = "in processing");

--Display list of shoppers which haven't ordered anything since last month.
SELECT u.user_id,u.name
FROM user u
WHERE  u.user_id NOT IN (
        SELECT o.user_id FROM orders o
        WHERE 
            o.order_date <= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 MONTH)
    );

--Display list of shopper along with orders placed by them in last 15 days. 
SELECT u.user_id,u.name
FROM user u
WHERE  u.user_id  IN (
        SELECT o.user_id FROM orders o
        WHERE 
            o.order_date <= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 15 DAY)
    );

-- Display list of order items which are in “shipped” state for particular Order Id (i.e.: 1020))
SELECT order_id , status , user_id  FROM orders 
WHERE (status="delivered" AND order_id='8');

--Display list of order items along with order placed date which fall between Rs 20 to Rs 50 price.
SELEC~T 
    o.order_date,
    p.name,
    p.price
FROM 
    orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
WHERE 
    p.price BETWEEN 20 AND 50
ORDER BY 
    o.order_date DESC;
